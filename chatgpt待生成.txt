PresetConfig.vue文件负责配置与维护预制信息列表，读取接口为：
## 读取预制信息列表
**描述**: 获取预制信息列表。
**请求方法**: `GET`
**接口路径**: `/api/param/presetlist`
**返回参数**: xml:
        <?xml version="1.0" encoding="UTF-8"?>
        <PresetList>
            <PresetNum>n</PresetNum>
            <Items>
                <Item id="0" preset_name="yuntai" model_name="xx.pt" ir_model_name="xx.pt" cla_id="0,1,2" cla_name="xx,xx,xx" 
                score_val="0.5,0.5,0.5" object_id="0" ir_object_id="0" location="0,0" image_channel="0" isRunIrModel="0" isControlPtz="0" thermal_num="3" />
                ...
            </Items>
        </PresetList>
进入界面自动读取预制信息列表，并且有一个按钮可以手动读取
帮我以列表的形式，显示预制信息，每一行显示一个预制信息，每一行显示的内容包括：预制名称、模型名称、红外模型名称、分类名称、分类ID、分数、目标ID、红外目标ID、位置、图像通道、是否运行红外模型、是否控制云台、测温次数
每一行包括修改预制信息、删除预制信息按钮，接口暂留。
列表结束后，有一个增加预制信息按钮，功能暂留。

const host = window.location.hostname;
                const port = '8010'; // 你的后端端口号
                const url_send = `http://${host}:${port}/api/param/presetlist`;
                const response = await axios.get(url_send);

点击修改预制信息后，跳出一个弹窗，

在这个界面中，负责编辑对应id的预制信息。
其中 id不可修改，预制名称：输入框；模型名称、红外模型名称：选择框，对应读取模型文件列表中的选择；分类名称、分类ID、分数这三个放在一个列表中，每增加一行，这三条都对应的增加一个；位置分为x,y两个输入框；
图像通道：选择0高清 1红外；是否运行红外模型、是否控制云台：选择 0不开启 1开启；测温次数：输入框
打开后，先调用读取模型列表接口，获取模型列表。
读取模型列表调用## 获取模型文件列表
**描述**: 获取所有模型文件的列表。
**请求方法**: `GET`
**接口路径**: `/api/model/list`
**返回参数**: xml:
```xml
<?xml version="1.0" encoding="UTF-8"?>
<ModelList>
    <ModelNum>n</ModelNum>
    <Items>
        <Item id="0" file_name="model1.pt"/>
        <Item id="1" file_name="model2.pt"/>
        ...
    </Items>
</ModelList>
```接口读取模型列表
再调用读取对应预制信息接口，获取对应信息：
## 读取对应编号的预制信息
**描述**: 读取对应编号的预制信息
**请求方法**: `GET`
**接口路径**: `/api/param/presetInfo`
**附加参数**: id: 预制信息编号
**返回参数**: xml:
        <?xml version="1.0" encoding="UTF-8"?>
        <Preset>
            <preset_name>xx</preset_name>
            <model_name>xx</model_name>
            <ir_model_name>xx.pt</ir_model_name>
            <classes>
                <Item id="0" value="xx" />
                ...
            </classes>
            <score>
                <Item value="0.5" />
                ...
            </score>
            <object_id>0</object_id>
            <ir_object_id>0</ir_object_id>
            <location>
                <Item x="0" y="0" />
            </location>
            <image_channel>0</image_channel>
            <isRunIrModel>0</isRunIrModel>
            <isControlPtz>0</isControlPtz>
            <tempture_num>3</tempture_num>
        </Preset>

ModelConfig.vue界面负责维护模型信息
所有用到的接口如下：
## 获取模型文件列表
**描述**: 获取所有模型文件的列表。
**请求方法**: `GET`
**接口路径**: `/api/model/list`
**返回参数**: xml:
```xml
<?xml version="1.0" encoding="UTF-8"?>
<ModelList>
    <ModelNum>n</ModelNum>
    <Items>
        <Item id="0" file_name="model1.pt"/>
        <Item id="1" file_name="model2.pt"/>
        ...
    </Items>
</ModelList>
```

## 上传模型文件
**描述**: 上传单个模型文件。
**请求方法**: `POST`
**接口路径**: `/api/model/upload`
**请求参数**: 
- `file`: 要上传的模型文件

**返回参数**: json:
```json
{
    "status": "success",
    "message": "Model file uploaded successfully",
    "file_id": "unique_file_identifier"
}
```

## 下载模型文件
**描述**: 下载单个模型文件。
**请求方法**: `GET`
**接口路径**: `/api/model/download`
**请求参数**: 
- `file`: 要下载的模型文件名

**返回参数**: 文件流

## 删除模型文件
**描述**: 删除指定的模型文件。
**请求方法**: `PUT`
**接口路径**: `/api/model/delete`
**请求参数**: 
- `file`: 要删除的模型文件名

**返回参数**: json:
```json
{
    "status": "success",
    "message": "Model file deleted successfully"
}
```
读取模型文件后，将模型文件在一个列表中显示。
上传单个模型文件时，在电脑本地选择一个文件，上传。上传完成后，要立马刷新模型文件列表
删除模型文件时，删除在列表中鼠标选中的模型文件。删除完成后，要立马刷新模型文件列表